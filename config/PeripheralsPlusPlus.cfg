AI Chat Box {
	# Cleverbot API key. This needs to be set (on the server if not playing single player) to use the service.
	String:cleverbotApiKey=

	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableAIChatBox=true

}
Barrel Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableBarrelTurtle=true

}
Chatbox {
	# Allow the Chat Box peripheral to send messages with unlimited vertical distance, but only if so the program chooses
	Boolean:allowUnlimitedVertical=true

	# If the character combination is detected at the beginning of a chat message, it will not be shown in chat-like a command and it'll only be accessible by chatboxes, disable it with a space
	String:chatboxCommandPrefix=\

	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableChatBox=true

	# Log the Chat Box peripheral's coordinates when it says a message, disabling this allows for 'naming' the chat box
	Boolean:logCoords=true

	# Range for the Chat Box peripheral's reading. Negative values indicate infinite
	Double:readRange=-1.0

	# Range for the Chat Box peripheral's say/tell function. Negative values indicate infinite
	Double:sayRange=64.0

	# Maximum number of messages per second a Chat Box peripheral can say
	Integer:sayRate=1

}
Chunky Turtle {
	# Radius of chunks that will be loaded. 0 for 1x1, 1 for 3x3, 2 for 5x5, etc. The maximum allowed by the default chunkloading settings is 5x5, edit config/forgeChunkLoading.cfg to change those
	Integer:chunkLoadingRadius=1

	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableChunkyTurtle=true

}
Environment Scanner {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableEnvironmentScanner=true

}
Feeder Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableFeederTurtle=true

}
Flinging Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableFlingingTurtle=true

}
Forestry Analyzers {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableAnalyzers=true

}
Gardening Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableGardeningTurtle=true

}
Interactive Sorter {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableInteractiveSorter=true

}
ME Bridge {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableMEBridge=true

}
Mag Strip Items {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableMagStripItems=true

}
Mana Manipulator {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableManaManipulator=true

}
Motion Detector {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableMotionDetector=true

}
Nano Bots {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableNanoBots=true

	# The amount of instructions allowed per nano swarm used on an entity, negative denotes infinite
	Integer:numberOfInstructions=8

	# The amount of seconds before a key is 'released', negative denotes infinite
	Double:secondsBeforeReversal=5.0

}
Navigational Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableNavigationTurtle=true

}
Ore Dictionary {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableOreDictionary=true

	# If enabled, the Ore Dictionary peripheral will display a chat message with the Ore Dictionary entries - useful for debugging
	Boolean:oreDictionaryMessage=false

}
Peripheral Container {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enablePeripheralContainer=true

	# The maximum number of peripherals the container is allows to contain
	Integer:maxNumberOfPeripherals=6

}
Player Interface {
	# If disabled, the peripheral will require no permission cards to function and will be allowed to access all inventories regardless of permissions.
	Boolean:enableInterfacePermissions=true

	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enablePlayerInterface=true

}
Player Sensor {
	# This enables the getNearbyPlayers and getAllPlayers functions
	Boolean:additionalMethods=true

	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enablePlayerSensor=true

	# The maximum range a player sensor could search for players
	Double:sensorRange=64.0

}
Privacy Guard {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enablePrivacyGuard=true

}
RF Turtle Charger {
	# If disabled, the recipe will be disabled
	Boolean:enableRFCharger=true

	# Amount of RF per turtle fuel value
	Integer:fuelRF=200

}
RFID Items {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableRfidItems=true

}
RedPower-Like Turtles {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableRedPowerLikeTurtles=true

}
Resupply Station {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableResupplyStation=true

}
Ridable Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableRidableTurtle=true

	# The amount of fuel used after each turtle movement
	Integer:fuelPerTurtleMovement=1

}
Shearing Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableShearTurtle=true

}
Sign Reading Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableReaderTurtle=true

}
Smart Helmet {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableSmartHelmet=true

}
Speaker {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableSpeaker=true

	# Range for the Speaker peripheral's say/tell function. Negative values indicate infinite
	Double:speechRange=64.0

}
Tank Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableTankTurtle=true

	# The maximum mB that the Thirsty Turtle can store internally
	Integer:maxNumberOfMillibuckets=10000

}
Time Sensor {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableTimeSensor=true

}
Turtle Teleporters {
	# If disabled, the recipe will be disabled
	Boolean:enableTurtleTeleporter=true

	# Fuel penalty for using a Turtle Teleporter. For example, 1.0 is a 0% penalty, or 2.0 (default) is a 100% penalty
	Double:teleporterPenalty=2.0

}
Villagers {
	# Whether to enable villagers from this mod
	Boolean:enableVillagers=true

}
XP Turtle {
	# If disabled, the recipe will be disabled and the current peripherals would cease to work
	Boolean:enableXPTurtle=true

}
